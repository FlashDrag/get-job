# Generated by Django 3.2.19 on 2023-07-06 14:22

from getpass import getpass
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
from django.contrib.auth.hashers import make_password


def create_default_employer(apps, schema_editor):
    """Create a default employer with a Employer proxy model
    and set it as the owner of all existing vacancies without an owner"""
    Employer = apps.get_model("employer", "Employer")

    # ask for email and password for the default Employer
    # when running migrations
    email = input("\nEnter email for the default Employer: ")
    password = getpass("\nEnter password for the default Employer: ")
    hashed_password = make_password(password)
    default_employer, _ = Employer.employer.get_or_create(
        email=email,
        defaults={
            "password": hashed_password,
        },
    )

    # set the default employer as the owner of all existing vacancies
    Vacancy = apps.get_model("jobs", "Vacancy")
    Vacancy.objects.filter(employer__isnull=True).update(
        employer=default_employer
    )


class Migration(migrations.Migration):

    dependencies = [
        ('jobs', '0013_auto_20230704_1957'),
    ]

    operations = [
        migrations.AddField(
            model_name='vacancy',
            name='employer',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='vacancies', to='employer.Employer'),
        ),
        migrations.RunPython(create_default_employer),
        migrations.AlterField(
            model_name='vacancy',
            name='employer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vacancies', to='employer.Employer'),
        ),
    ]
